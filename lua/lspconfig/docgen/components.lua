local docgen = require 'lspconfig/docgen'
local M = {}

local mkdocs_template = [[
site_name: nvim-lspconfig
site_url: https://example.com/
repo_url: https://github.com/neovim/nvim-lspconfig
theme:
  name: material
  logo: assets/logo.png
  favicon: assets/images/favicon.ico
  palette:
    primary: green
    accent: green
  features:
    - navigation.expand
    - navigation.instant
    - navigation.tracking
    - navigation.tabs
    - navigation.top
markdown_extensions:
  - sane_lists
  - pymdownx.highlight
  - pymdownx.superfences
  - pymdownx.magiclink
extra:
  social:
    - icon: fontawesome/brands/github
      link: https://github.com/neovim/nvim-lspconfig
nav:
  - Home: index.md
  - Install: install.md
  - Configurations:
    - Introduction: configurations/index.md
    - Languages:
%s
]]

function M.raw(_, s)
  return s
end

function M.header(props, s)
  return string.format('%s %s\n\n', string.rep('#', props.level), s)
end

function M.text(_, s)
  return vim.trim(s) .. '\n'
end

function M.indented(props, s)
  return #s > 0 and docgen.indent(props.level, s) .. '\n' or ''
end

function M.paragraph(_, s)
  return vim.trim(s) .. '\n\n'
end

function M.list_item(props, s)
  return string.format('%s %s\n', (props.type or '-'), s)
end

function M.tick(_, s)
  return #s > 0 and string.format('`%s`', vim.trim(s)) or ''
end

function M.bold(_, s)
  return string.format('**%s**', vim.trim(s))
end

function M.link(props, s)
  return string.format('[%s](#%s)', vim.trim(s), props.link)
end

function M.code(props, s)
  return string.format('```%s\n%s\n```\n\n', props.lang, s)
end

function M.details(props, s)
  return string.format(
    [[<details><summary>%s</summary>
%s
</details>]],
    props.label,
    vim.trim(s)
  ) .. '\n\n'
end

function M.readme(props)
  local hero =
    'The following LSP configs are included. This documentation is autogenerated from the lua files. Follow a link to find documentation for that config.'
  local names = vim.tbl_map(function(module)
    return { M.list_item, {}, { M.link, { link = module.name }, module.name } }
  end, props.list)

  return {
    { M.header, { level = 1 }, 'Configurations' },
    { M.paragraph, {}, hero },
    names,
    '\n',
  }
end

function M.config_entry_code(props)
  local lines = {}
  if props.commands and #props.commands > 0 then
    if props.web then
      table.insert(lines, { M.header, { level = 3 }, 'Commands' })
      table.insert(lines, props.commands)
    else
      table.insert(lines, { M.indented, { level = 2 }, 'Commands:' })
      table.insert(lines, { M.indented, { level = 4 }, props.commands })
    end
  end
  if props.defaults and #props.defaults > 0 then
    local formatted = table.concat(props.defaults, '\n')
    if props.web then
      table.insert(lines, { M.header, { level = 3 }, 'Default values' })
      table.insert(lines, { M.code, { lang = 'lua' }, formatted })
    else
      table.insert(lines, { M.indented, { level = 2 }, 'Default Values:' })
      table.insert(lines, { M.indented, { level = 4 }, formatted })
    end
  end

  return props.web and lines or { M.code, { lang = 'lua' }, lines }
end

function M.config_entry_settings(props)
  if #vim.tbl_keys(props.settings) > 0 then
    if props.web then
      return {
        { M.header, { level = 2 }, 'Available settings' },
        props.settings,
      }
    end

    return {
      { M.paragraph, {}, 'This server accepts configuration via the `settings` key.' },
      { M.details, { label = 'Available settings:' }, props.settings },
    }
  end

  return ''
end

function M.config_entry(props)
  local commands = docgen.tbl_map_keys_sorted(function(v, k)
    if props.web then
      return { M.list_item, {}, { { M.bold, {}, k }, ': ', v.description } }
    end

    local result = v.description and string.format('%s: %s', k, v.description) or k
    return { M.list_item, {}, result }
  end, props.entry.config.commands)

  local defaults = docgen.tbl_map_keys_sorted(function(v, k)
    local description = docgen.parse_description(v)
    return string.format('%s = %s', k, description)
  end, props.entry.config.default_config)

  local settings = docgen.tbl_map_keys_sorted(function(v, k)
    if type(v) ~= 'table' then
      return nil
    end

    return { M.settings_block, { name = k, setting = v, web = props.web } }
  end, props.entry.settings)

  if props.web then
    return {
      { M.header, { level = 1 }, props.entry.name },
      { M.paragraph, {}, props.entry.docs.description },
      { M.header, { level = 2 }, 'Setup' },
      { M.code, { lang = 'lua' }, string.format([[require'lspconfig'.%s.setup{}]], props.name) },
      { M.config_entry_code, { defaults = defaults, commands = commands, web = props.web } },
      { M.config_entry_settings, { settings = settings, web = props.web } },
    }
  end

  return {
    { M.header, { level = 2 }, props.entry.name },
    { M.paragraph, {}, props.entry.docs.description },
    { M.text, {}, { M.bold, {}, 'Snippet to enable the language server:' } },
    { M.code, { lang = 'lua' }, string.format([[require'lspconfig'.%s.setup{}]], props.name) },
    { M.text, {}, { M.bold, {}, 'Commands and default values:' } },
    { M.config_entry_code, { commands = commands, defaults = defaults, web = props.web } },
    { M.config_entry_settings, { settings = settings, web = props.web } },
  }
end

function M.settings_block(props)
  local function with_details(prefix, value)
    local inspected = vim.inspect(value, { newline = '', indent = '' })

    if value then
      return {
        { M.indented, { level = 2 }, { string.format('%s: ', prefix), { M.tick, {}, inspected } } },
        '\n',
      }
    end

    return ''
  end

  local value = nil
  local description = docgen.excape_markdown_punctuations(props.setting.description) .. '\n'

  if props.setting.enum then
    value = string.format('enum %s', vim.inspect(props.setting.enum))
  elseif props.setting.type then
    value = table.concat(vim.tbl_flatten { props.setting.type }, '|')
  end

  if props.web then
    return {
      { M.header, { level = 3 }, { M.tick, {}, props.name } },
      value and { M.list_item, {}, { 'Type: ', { M.tick, {}, value } } } or '',
      props.setting.default
          and { M.list_item, {}, { 'Default: ', { M.tick, {}, vim.inspect(props.setting.default) } } }
        or '',
      props.setting.items and { M.list_item, {}, { 'Array items: ', { M.tick, {}, props.setting.items } } } or '',
      '\n',
      { M.paragraph, {}, description },
    }
  end

  local default = with_details('Default', props.setting.default)
  local items = with_details('Array items', props.setting.items)

  return {
    {
      M.list_item,
      {},
      {
        { M.bold, {}, { M.tick, {}, props.name } },
        value and { ': ', { M.tick, {}, value } } or '',
        '\n',
      },
    },
    default,
    items,
    { M.indented, { level = 2 }, description },
  }
end

function M.mkdocs(props)
  local languages = {}
  for _, v in ipairs(props.list) do
    languages[v.label] = v
  end

  local sorted_languages = table.concat(
    docgen.tbl_map_keys_sorted(function(module)
      local filename = string.format('configurations/%s.md', module.name)
      return string.format('%s- %s: %s', string.rep(' ', 6), module.label, filename)
    end, languages),
    '\n'
  )

  return string.format(mkdocs_template, sorted_languages)
end

return M
